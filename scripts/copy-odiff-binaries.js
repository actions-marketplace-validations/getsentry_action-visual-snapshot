const {execSync} = require('child_process');
const path = require('path');
const fs = require('fs');

function writeTemplate(out) {
  fs.writeFileSync(
    out,
    `The files in this directory were autogenerated as part of the build process. 
The compiled odiff binaries are moved to the root of the project because odiff will
invoke them as if it were still inside node_modules. Vercel/ncc cannot analyze the path
of the binary, so we need to manually ensure that it is correct.
`
  );
}

// Logs a copied binary to file so that we can selectively git add it later.
function logCopiedBinary(copiedPath) {
  fs.appendFileSync(
    path.resolve(__dirname, 'copied-binaries.txt'),
    `${copiedPath}\n`
  );
}

// Copies the  compiled binaries to the root of the project.
function copyCompiledBinaries() {
  const result = execSync('find node_modules/odiff-bin -name ODiffBin');

  // Split the output lines
  const paths = result.toString().split('\n');

  // Some compiled files include workarounds for darwin platform, we dont care about those
  for (const filepath of paths) {
    if (filepath.includes('workaround') || !filepath.endsWith('ODiffBin')) {
      continue;
    }

    const dir = filepath.replace('node_modules/odiff-bin/', '').split('/');
    // Remove the last element, which is the file name
    dir.pop();

    const finalDir = dir.join('/');
    // Recreate the directory at root
    fs.mkdirSync(finalDir, {recursive: true});

    // If this is already checked in somehow, just leave it
    const finalPath = `${finalDir}/${path.basename(filepath)}`;
    if (fs.existsSync(finalPath)) {
      continue;
    }

    const templatePath = `${dir.shift()}/BUILD.odiff.txt`;

    // Copy the binary and write the template
    fs.copyFileSync(filepath, finalPath);
    writeTemplate(templatePath);

    // Log both files
    logCopiedBinary(finalPath);
    logCopiedBinary(templatePath);
  }
}

// Looks for BUILD.odiff.txt files and removes their directories
function cleanPrecompiledBinaries() {
  const result = execSync('find . -name BUILD.odiff.txt');

  const buildDirectories = result.toString().split('\n');

  for (const buildDir of buildDirectories) {
    if (!buildDir) {
      continue;
    }

    const components = buildDir.split('/');
    fs.rmSync(path.resolve(components[1]), {recursive: true});
  }
}

cleanPrecompiledBinaries();
copyCompiledBinaries();
